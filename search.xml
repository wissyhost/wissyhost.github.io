<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>播客 RSS 列表</title>
    <url>/2020/02/24/2020-02-24-podcast-list/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <ol>
<li>「津津乐道」：<a href="https://feeds.jjldbk.com/all.xml" target="_blank" rel="noopener">https://feeds.jjldbk.com/all.xml</a></li>
<li>「乱炖」：<a href="https://feeds.jjldbk.com/ld.xml" target="_blank" rel="noopener">https://feeds.jjldbk.com/ld.xml</a></li>
<li>「蓝海之下」：<a href="https://feeds.jjldbk.com/diving.xml" target="_blank" rel="noopener">https://feeds.jjldbk.com/diving.xml</a></li>
<li>「拼娃时代」：<a href="https://feeds.jjldbk.com/pwsd.xml" target="_blank" rel="noopener">https://feeds.jjldbk.com/pwsd.xml</a></li>
<li>「津津乐道」：<a href="https://feeds.jjldbk.com/pzsh.xml" target="_blank" rel="noopener">https://feeds.jjldbk.com/pzsh.xml</a></li>
<li>津津乐道」：<a href="https://feeds.jjldbk.com/kjxs.xml" target="_blank" rel="noopener">https://feeds.jjldbk.com/kjxs.xml</a><br><a href="https://getpodcast.xyz" target="_blank" rel="noopener">查看你感兴趣的更多电台</a></li>

</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>rss</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 软件清单</title>
    <url>/2020/02/23/2020-02-23-Mac-software-list/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <ol>
<li>pock 或者 TouchSwitcher</li>
<li>Adguard</li>
<li>mweb</li>
<li>clearMyMac 3</li>
<li>keka</li>
<li>istat menus</li>
<li>scroll reverser</li>
<li>margin Note3</li>
<li>termius</li>
<li>cloud TV</li>
<li>Macs Fan Control</li>
<li>提醒事项（Mac自带）</li>
<li>ScreenFocus</li>
<li>openConnect-GUI,Tunnelblick,Shimo</li>

</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>网站类目爬取技巧</title>
    <url>/2019/07/11/2019-07-14-crawler-category/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p>网站类目爬取技巧<p></p>
<p>我们在爬取网站的时候,经常因为找不到类目入口需要人工整理类目元数据,再输入到爬虫程序里面,这边介绍的方法目前有两种,1. 获取 JS 对象里面的数据,2. 通过 url 分析,后续在补充</p>
<h3 id="JS-对象里面包含的数据"><a href="#JS-对象里面包含的数据" class="headerlink" title="JS 对象里面包含的数据"></a>JS 对象里面包含的数据</h3><p>以京东手机触屏版为例, 打开首页类目的页面</p>
<p><a href="https://so.m.jd.com/webportal/channel/m_category?searchFrom=bysearchbox" target="_blank" rel="noopener">https://so.m.jd.com/webportal/channel/m_category?searchFrom=bysearchbox</a><br><a href="/static/images/2019-07-14/%E4%BA%AC%E4%B8%9C%E6%89%8B%E6%9C%BA%E7%89%88%E7%B1%BB%E7%9B%AE%E9%80%89%E6%8B%A9.png" title="京东手机版类目选择" class="gallery-item"><img src="/static/images/2019-07-14/%E4%BA%AC%E4%B8%9C%E6%89%8B%E6%9C%BA%E7%89%88%E7%B1%BB%E7%9B%AE%E9%80%89%E6%8B%A9.png" alt="京东手机版类目选择" title="京东手机版类目选择"></a><br>我们分析的 JS 的事件 event 都在 document 文件内部,所有我们我们将 html 文件下载到本地并格式化<br><a href="/static/images/2019-07-14/%E4%BA%AC%E4%B8%9C%E8%A7%A6%E5%B1%8F%E7%89%88%E7%B1%BB%E7%9B%AE%E7%BB%93%E6%9E%9C.png" title="京东触屏版类目结果" class="gallery-item"><img src="/static/images/2019-07-14/%E4%BA%AC%E4%B8%9C%E8%A7%A6%E5%B1%8F%E7%89%88%E7%B1%BB%E7%9B%AE%E7%BB%93%E6%9E%9C.png" alt="京东触屏版类目结果" title="京东触屏版类目结果"></a><br>这个 JS 的文档就是我们想要的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 这样也可以导出JS对象成Json数组</span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="built_in">window</span>.bigpipe.componentData.m1.data.json)</span><br></pre></td></tr></table></figure>

<h3 id="通过获取类目-URL"><a href="#通过获取类目-URL" class="headerlink" title="通过获取类目 URL"></a>通过获取类目 URL</h3><p><a href="/static/images/2019-07-14/%E4%BA%AC%E4%B8%9C%E7%94%B5%E8%84%91%E7%89%88.png" title="京东电脑版" class="gallery-item"><img src="/static/images/2019-07-14/%E4%BA%AC%E4%B8%9C%E7%94%B5%E8%84%91%E7%89%88.png" alt="京东电脑版" title="京东电脑版"></a></p>
<p>这些原理都是很简单,首先都是要<code>选择</code>元素,然后<code>观察</code>事件的 event,分析 JS 代码</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用脚本</title>
    <url>/2019/02/26/2019-02-26-bash-functions/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p>这段脚本包含100多个bash函数，是我几年前方便自己调试和诊断问题写的。贴出来给有需要的人，因为比较懒怎么使用这些函数就不写说明了。其中以下划线开头的是表示私有函数，以<code>cf_</code>开头的表示公共函数，可当做命令使用。<br>原文:<a href="http://hongjiang.info/" target="_blank" rel="noopener">http://hongjiang.info/</a><p></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> check current os is linux</span></span><br><span class="line">function cf_is_linux() &#123;</span><br><span class="line"> [[ "$OSTYPE" = *linux* ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check current os is mac/darwin</span></span><br><span class="line">function cf_is_darwin() &#123;</span><br><span class="line"> [[ "$OSTYPE" = *darwin* ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check current os is windows/cygwin</span></span><br><span class="line">function cf_is_cygwin() &#123;</span><br><span class="line"> [[ "$OSTYPE" = *cygwin* ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_is_gnu_date() &#123;</span><br><span class="line"> date --version &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_is_gnu_sed() &#123;</span><br><span class="line"> sed --version &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_is_gnu_awk() &#123;</span><br><span class="line"> awk --version | grep GNU &gt;/dev/null &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_is_gnu_grep() &#123;</span><br><span class="line"> grep --version | grep GNU &gt;/dev/null &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> java style startsWith</span></span><br><span class="line">function cf_starts_with() &#123;</span><br><span class="line"> local str=$1</span><br><span class="line"> local pre=$2</span><br><span class="line"> [[ "$str" ==  $&#123;pre&#125;* ]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> java style substring</span></span><br><span class="line">function cf_substring() &#123;</span><br><span class="line"> local str=$1</span><br><span class="line"> local begin=$2</span><br><span class="line"> local end=$3</span><br><span class="line"> if [ -z "$end" ]; then</span><br><span class="line"> echo $&#123;str:$begin&#125; </span><br><span class="line"> else</span><br><span class="line"> local len=`expr $end - $begin`</span><br><span class="line"> echo $&#123;str:$begin:$len&#125;</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get current shell name</span></span><br><span class="line">function cf_shell_name() &#123;</span><br><span class="line"> local name=$( ps -ocommand= -p $$ | awk '&#123;print $1&#125;')</span><br><span class="line"> if cf_starts_with $name "-"; then</span><br><span class="line"> cf_substring $name 1</span><br><span class="line"> else</span><br><span class="line"> echo $name</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check current shell is bash</span></span><br><span class="line">function cf_is_bash() &#123;</span><br><span class="line"> [[ `cf_shell_name` = "-bash" || `basename $(cf_shell_name)` = "bash" ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check current shell is zsh</span></span><br><span class="line">function cf_is_zsh() &#123;</span><br><span class="line"> [[ `cf_shell_name` = "-zsh" || `basename $(cf_shell_name)` = "zsh" ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _script_dir() &#123;</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then</span><br><span class="line"> cd "$( dirname "$&#123;BASH_SOURCE[0]&#125;" )" &amp;&amp; pwd -P </span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> cd "$( dirname "$&#123;(%):-%N&#125;" )" &amp;&amp; pwd -P </span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _script_file() &#123;</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then</span><br><span class="line"> basename "$&#123;BASH_SOURCE[0]&#125;" </span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> basename "$&#123;(%):-%N&#125;" </span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colorful grep. private <span class="keyword">function</span></span></span><br><span class="line">function _get_colorful_grep() &#123;</span><br><span class="line"> cf_is_gnu_grep &gt;/dev/null &amp;&amp; echo "grep --color" &amp;&amp; return 0</span><br><span class="line"> export GREP_OPTIONS='--color=always'</span><br><span class="line"> export GREP_COLOR='1;35;40'</span><br><span class="line"> echo "grep" </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> list all common <span class="built_in">functions</span></span></span><br><span class="line">function cf_functions() &#123;</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then</span><br><span class="line"> declare -F | awk '&#123;print $NF&#125;' | grep "cf_" | sort</span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> print -l $&#123;(ok)functions&#125; | grep "cf_" | sort</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get total memory (MB)</span></span><br><span class="line">function cf_mem_total() &#123;</span><br><span class="line"> if cf_is_linux &gt;/dev/null; then</span><br><span class="line"> free -m | awk '/^Mem/&#123;print $2"M"&#125;'</span><br><span class="line"> elif cf_is_darwin &gt;/dev/null; then</span><br><span class="line"> sysctl hw.memsize | awk '&#123;print $2/1024/1024"M"&#125;'</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported os" &amp;&amp; return 1</span><br><span class="line"> fi </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> decimal to hexadecimal</span></span><br><span class="line">function cf_dec2Hex() &#123;</span><br><span class="line"> printf "%x" $1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> decimal to octal </span></span><br><span class="line">function cf_dec2Oct() &#123;</span><br><span class="line"> printf "%o" $1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> decimal to binary</span></span><br><span class="line">function cf_dec2Bin() &#123;</span><br><span class="line"> echo "obase=2; $1" | bc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> hexadecimal to decimal </span></span><br><span class="line">function cf_hex2Dec() &#123;</span><br><span class="line"> echo $((16#$1))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> octal to decimal </span></span><br><span class="line">function cf_oct2Dec() &#123;</span><br><span class="line"> echo $((8#$1))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> binary to decimal </span></span><br><span class="line">function cf_bin2Dec() &#123;</span><br><span class="line"> echo $((2#$1))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_calc() &#123;</span><br><span class="line"> local exp="$1"</span><br><span class="line"> echo "$exp" | bc -l | awk '&#123;printf "%.2f", $0&#125;'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> warning and <span class="built_in">exit</span>, not <span class="keyword">for</span> interactive shell</span></span><br><span class="line">function cf_die() &#123;</span><br><span class="line"> local msg="$1"</span><br><span class="line"> local code=$&#123;2:-1&#125;</span><br><span class="line"> echo "$msg" &amp;&amp; exit $code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> highlight key words from file or pipeline</span></span><br><span class="line">function cf_highlight() &#123;</span><br><span class="line"> local keyword="$1"</span><br><span class="line"> local cgrep="$(_get_colorful_grep)"</span><br><span class="line"> if [ -p /dev/stdin ]; then</span><br><span class="line"><span class="meta"> #</span><span class="bash"> from pipeline</span></span><br><span class="line"> while IFS='' read line; do</span><br><span class="line"> echo $line | eval "$cgrep -E \"$&#123;keyword&#125;|$\""</span><br><span class="line"> done</span><br><span class="line"> else</span><br><span class="line"> local file="$2"</span><br><span class="line"> eval "$cgrep -E \"$&#123;keyword&#125;|$\"" "$file"</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_ps_env() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line"> if cf_is_linux &gt;/dev/null; then</span><br><span class="line"> xargs --null --max-args=1 &lt; /proc/$pid/environ</span><br><span class="line"> elif cf_is_darwin &gt;/dev/null; then</span><br><span class="line"> ps -wwE -p $pid</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported os" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get bash(current shell) major version</span></span><br><span class="line">function cf_bash_major_ver() &#123;</span><br><span class="line"> echo $&#123;BASH_VERSINFO[0]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get bash(current shell) minor version</span></span><br><span class="line">function cf_bash_minor_ver() &#123;</span><br><span class="line"> echo $&#123;BASH_VERSINFO[1]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get kernel version</span></span><br><span class="line">function cf_kernel_ver() &#123;</span><br><span class="line"> if cf_is_linux &gt;/dev/null; then</span><br><span class="line"> uname -r | cut -d'-' -f1</span><br><span class="line"> elif cf_is_darwin &gt;/dev/null; then</span><br><span class="line"> uname -r | cut -d'-' -f1</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported os" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get kernel major version</span></span><br><span class="line">function cf_kernel_major_ver() &#123;</span><br><span class="line"> if cf_is_linux &gt;/dev/null; then</span><br><span class="line"> uname -r | awk -F'.' '&#123;print $1"."$2&#125;' </span><br><span class="line"> elif cf_is_darwin &gt;/dev/null; then</span><br><span class="line"> uname -r | awk -F'.' '&#123;print $1"."$2&#125;' </span><br><span class="line"> else</span><br><span class="line"> echo "unsupported os" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get kernel minor version</span></span><br><span class="line">function cf_kernel_minor_ver() &#123;</span><br><span class="line"> if cf_is_linux &gt;/dev/null; then</span><br><span class="line"> uname -r | awk -F'.' '&#123;print $3&#125;'</span><br><span class="line"> elif cf_is_darwin &gt;/dev/null; then</span><br><span class="line"> uname -r | awk -F'.' '&#123;print $3&#125;'</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported os" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get value from config file such as app.properties</span></span><br><span class="line">function cf_get_property() &#123;</span><br><span class="line"> local file="$1"</span><br><span class="line"> local key="$2"</span><br><span class="line"> grep "^$&#123;key&#125;=" "$file" | tr -d '\r' | cut -d'=' -f2 | cf_trim</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get <span class="built_in">command</span> path, eg: `cf_command_path ls` output /usr/bin/ls</span></span><br><span class="line">function cf_command_path() &#123;</span><br><span class="line"> local cmd=$1</span><br><span class="line"> cf_is_bash &amp;&amp; builtin type -P $cmd &amp;&amp; return $?</span><br><span class="line"></span><br><span class="line"> if [ -x /usr/bin/which ]; then</span><br><span class="line"> local p=$( /usr/bin/which $1 | head -1 )</span><br><span class="line"> [ ! -z "$p" ] &amp;&amp; echo $p &amp;&amp; return 0</span><br><span class="line"> return 1</span><br><span class="line"> else</span><br><span class="line"> local p=$( which $1 | grep "^/" | head -1 )</span><br><span class="line"> [ ! -z "$p" ] &amp;&amp; echo $p &amp;&amp; return 0</span><br><span class="line"> return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get all ip addresses</span></span><br><span class="line">function cf_ip_list() &#123;</span><br><span class="line"> if [ -x /sbin/ip ]; then</span><br><span class="line"> local list=$(/sbin/ip -o -4 addr list | awk '&#123;print $4&#125;' | cut -d'/' -f1 | tr '\n' ',')</span><br><span class="line"> else</span><br><span class="line"> local list=$(/sbin/ifconfig | grep "inet " | awk '&#123;print $2&#125;' | sed 's/addr://' | tr '\n' ',')</span><br><span class="line"> fi</span><br><span class="line"> echo $&#123;list%,&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_stdio() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> /usr/sbin/lsof -a -p $pid -d 0,1,2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_stdout() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> if cf_is_linux &gt;/dev/null; then</span><br><span class="line"> readlink -f /proc/$pid/fd/1</span><br><span class="line"> elif cf_is_darwin &gt;/dev/null; then</span><br><span class="line"> /usr/sbin/lsof -a -p $pid -d 1 | awk 'NR&gt;1&#123;print $NF&#125;'</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported os" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get file last modification time</span></span><br><span class="line">function cf_last_modification() &#123;</span><br><span class="line"> local file="$1"</span><br><span class="line"> if [[ $OSTYPE == *linux* ]];then</span><br><span class="line"> date +%Y%m%d%H%M%S -r $file</span><br><span class="line"> elif [[ $OSTYPE == *darwin* ]];then</span><br><span class="line"> stat -f "%Sm" -t "%Y%m%d%H%M%S" $file</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check current user is root </span></span><br><span class="line">function cf_is_root() &#123;</span><br><span class="line"> [ `whoami` = "root" ] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check current shell is interactive</span></span><br><span class="line">function cf_is_interactive_shell() &#123;</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then</span><br><span class="line"> [[ "$-" = *i* ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> [[ -o interactive ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check current shell is login shell</span></span><br><span class="line">function cf_is_login_shell() &#123;</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then</span><br><span class="line"> shopt -q login_shell &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> [[ -o login ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check <span class="built_in">command</span> is exists</span></span><br><span class="line">function cf_is_command_exists() &#123;</span><br><span class="line"> local cmd=$1</span><br><span class="line"> if [ -x /usr/bin/which ]; then</span><br><span class="line"> /usr/bin/which $cmd &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> else</span><br><span class="line"> which $cmd &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo "true" &amp;&amp; return 0 </span><br><span class="line"> fi</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check file name globbing flag</span></span><br><span class="line">function cf_is_glob_enabled() &#123;</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then </span><br><span class="line"> [[ $- != *f* ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> [[ -o glob ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">enable</span> file name globbing</span></span><br><span class="line">function cf_enable_glob() &#123;</span><br><span class="line"> cf_is_bash &gt;/dev/null &amp;&amp; set +f &amp;&amp; return 0</span><br><span class="line"> cf_is_zsh &gt;/dev/null &amp;&amp; set -o glob &amp;&amp; return 0</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">disable</span> file name globbing</span></span><br><span class="line">function cf_disable_glob() &#123;</span><br><span class="line"> cf_is_bash &gt;/dev/null &amp;&amp; set -f &amp;&amp; return 0</span><br><span class="line"> cf_is_zsh &gt;/dev/null &amp;&amp; set -o noglob &amp;&amp; return 0</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check extglob flag</span></span><br><span class="line">function cf_is_extglob_enabled() &#123;</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then </span><br><span class="line"> shopt -q extglob &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> [[ -o kshglob ]] &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">enable</span> extglob </span></span><br><span class="line">function cf_enable_extglob() &#123;</span><br><span class="line"> cf_is_bash &gt;/dev/null &amp;&amp; shopt -s extglob &amp;&amp; return 0</span><br><span class="line"> cf_is_zsh &gt;/dev/null &amp;&amp; set -o kshglob &amp;&amp; return 0</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">disable</span> extglob </span></span><br><span class="line">function cf_disable_extglob() &#123;</span><br><span class="line"> cf_is_bash &gt;/dev/null &amp;&amp; shopt -u extglob &amp;&amp; return 0</span><br><span class="line"> cf_is_zsh &gt;/dev/null &amp;&amp; unsetopt kshglob &amp;&amp; return 0</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> check pid is exists</span></span><br><span class="line">function cf_is_pid_exists() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> [ -z "$pid" ] &amp;&amp; echo "false" &amp;&amp; return 1</span><br><span class="line"> kill -0 $pid &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_is_java() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> ps -ocommand= -p$pid | awk '$1~/java$/' &gt; /dev/null &amp;&amp; echo "true" &amp;&amp; return 0</span><br><span class="line"> echo "false" &amp;&amp; return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_is_available_port() &#123;</span><br><span class="line"> local port=$1</span><br><span class="line"> if [[ "$OSTYPE" = *linux* ]];then</span><br><span class="line"> local r=$( netstat -ant | awk '$6=="LISTEN" &amp;&amp; $4~":'$port'$"' )</span><br><span class="line"> elif [[ "$OSTYPE" = *darwin* ]];then</span><br><span class="line"> local r=$( netstat -ant | awk '$6=="LISTEN"' | grep "\.$port " )</span><br><span class="line"> else</span><br><span class="line"> echo "unknown system" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line"></span><br><span class="line"> [ -z "$r" ] &amp;&amp; echo "true" &amp;&amp; return 0;</span><br><span class="line"> echo "false" &amp;&amp; return 1 # port has been used</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_defined() &#123;</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then</span><br><span class="line"> [[ $&#123;!1-X&#125; == $&#123;!1-Y&#125; ]]</span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> [[ $&#123;(P)1-X&#125; == $&#123;(P)1-Y&#125; ]]</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_has_value() &#123;</span><br><span class="line"> cf_defined $1 || return 1</span><br><span class="line"> if cf_is_bash &gt;/dev/null; then</span><br><span class="line"> [[ -n $&#123;!1&#125; ]] &amp;&amp; return 0</span><br><span class="line"> elif cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> [[ -n $&#123;(P)1&#125; ]] &amp;&amp; return 0</span><br><span class="line"> fi</span><br><span class="line"> return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_has_sudo_privilege() &#123;</span><br><span class="line"><span class="meta"> #</span><span class="bash"> <span class="keyword">do</span> not need password</span></span><br><span class="line"> sudo -n echo &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_timestamp() &#123;</span><br><span class="line"> date +%F-%T | tr ':-' '_' #2015_12_01_22_15_22</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_length() &#123;</span><br><span class="line"> echo $&#123;#1&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> trim string</span></span><br><span class="line">function cf_trim() &#123;</span><br><span class="line"> if [ -p /dev/stdin ]; then</span><br><span class="line"> while IFS='' read line; do</span><br><span class="line"> _trim "$line"</span><br><span class="line"> done</span><br><span class="line"> else</span><br><span class="line"> _trim "$1"</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> private <span class="keyword">function</span></span></span><br><span class="line">function _trim() &#123;</span><br><span class="line"> local str="$1"</span><br><span class="line"> local extglob=$(cf_is_extglob_enabled)</span><br><span class="line"> if cf_is_bash &gt;/dev/null || cf_is_zsh &gt;/dev/null; then</span><br><span class="line"> [ $extglob = "false" ] &amp;&amp; cf_enable_extglob</span><br><span class="line"> str="$&#123;str##*( )&#125;"</span><br><span class="line"> str="$&#123;str%%*( )&#125;"</span><br><span class="line"> [ $extglob = "false" ] &amp;&amp; cf_disable_extglob</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line"> echo $str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_lower() &#123;</span><br><span class="line"> echo "$1" | tr '[:upper:]' '[:lower:]'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_upper() &#123;</span><br><span class="line"> echo "$1" | tr '[:lower:]' '[:upper:]'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_ps_name() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> if cf_is_java $pid &gt;/dev/null; then</span><br><span class="line"> local main=$(cf_ps_java_main $pid)</span><br><span class="line"> echo "java($main)"</span><br><span class="line"> else</span><br><span class="line"> ps -ocommand= -p $pid | awk '&#123;print $1&#125;'</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_ppid() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> ps -oppid= -p $pid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_ps_java_main() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> ps -ocommand= -p $pid | tr ' ' '\n' | awk '/-classpath|-cp/&#123;getline;next&#125;;/^-/&#123;next&#125;1' | awk 'NR==2'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_ps_time() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line"> local elapsed="$(ps -oetime= -p $pid | cf_trim)"</span><br><span class="line"> local started="$(ps -olstart= -p $pid | cf_trim)"</span><br><span class="line"> if [ `cf_is_gnu_date` = "true" ]; then</span><br><span class="line"> started=$(date +'%Y-%m-%d %H:%M:%S' -d "$started")</span><br><span class="line"> fi</span><br><span class="line"> local cpu_time=$(ps -otime= -p $pid | cf_trim)</span><br><span class="line"> echo "started from: $started, elapsed: $elapsed, cumulative cpu time: $cpu_time"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_ps_zombies() &#123;</span><br><span class="line"> ps -opid,state,command -e | awk 'NR==1 || $2=="Z"'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_connection_topology() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line"> /usr/sbin/lsof -Pan -iTCP -p $pid &gt; /tmp/.$pid.lsof</span><br><span class="line"> grep -o "[0-9.:]*-&gt;[0-9.:]*" /tmp/.$pid.lsof &gt; /tmp/.$pid.conns</span><br><span class="line"> grep "LISTEN" /tmp/.$pid.lsof | awk '$9~/*/&#123;print substr($9,3)&#125;' &gt; /tmp/.$pid.ports</span><br><span class="line"></span><br><span class="line"> echo "-------------- downstream -------------"</span><br><span class="line"> for port in $(cat /tmp/.$pid.ports); do</span><br><span class="line"> cf_connection_list_by_port $port | awk '$6=="ESTABLISHED" &#123;print $5&#125;' | cut -d':' -f1 | sort | uniq -c | awk '&#123;print $2"--&gt;localhost:"'$port'" ("$1")"&#125;'</span><br><span class="line"> done</span><br><span class="line"></span><br><span class="line"> echo "-------------- upstream ---------------"</span><br><span class="line"> local portsExpr=$(cat /tmp/.$pid.ports | sed -e 's/^/:/' -e 's/$/-&gt;/' | xargs | sed 's/ /|/g')</span><br><span class="line"> grep -Ev "$portsExpr" /tmp/.$pid.conns &gt; /tmp/.$pid.out</span><br><span class="line"> awk -F'-&gt;' '&#123;print $2&#125;' /tmp/.$pid.out | sort | uniq -c | sort -nrk1 | awk '&#123;print "localhost--&gt;"$2" ("$1")"&#125;'</span><br><span class="line"> rm -f /tmp/.$pid.lsof /tmp/.$pid.conns /tmp/.$pid.ports</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_connection_list_by_pid() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> /usr/sbin/lsof -Pan -iTCP -p $pid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_connection_list_by_port() &#123;</span><br><span class="line"> local port=$1</span><br><span class="line"> netstat -ant| awk '$4~/[:.]'"$port"'$/'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_connection_stat_by_pid() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> local interval=$&#123;2:-1&#125;</span><br><span class="line"> /usr/sbin/lsof -Pan -iTCP -p $pid -r $interval</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_connection_stat_by_port() &#123;</span><br><span class="line"> local port=$1</span><br><span class="line"> netstat -ant -c| awk '$1=="Proto"&#123;print "\n"$0&#125;;$4~/[:.]'"$port"'$/'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_listening_sockets() &#123;</span><br><span class="line"><span class="meta"> #</span><span class="bash">lsof -Pnl -i4TCP -sTCP:LISTEN <span class="comment">#low version unsupported -sTCP params</span></span></span><br><span class="line"> if cf_is_linux &gt;/dev/null || cf_is_darwin &gt;/dev/null; then</span><br><span class="line"> if cf_has_sudo_privilege; then</span><br><span class="line"> sudo /usr/sbin/lsof -Pnl -i4TCP | grep LISTEN</span><br><span class="line"> else</span><br><span class="line"> /usr/sbin/lsof -Pnl -i4TCP | grep LISTEN</span><br><span class="line"> fi</span><br><span class="line"> else</span><br><span class="line"> netstat -plnt 2&gt;/dev/null | grep -v tcp6</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_traffic_by_eth() &#123;</span><br><span class="line"> local eth=$&#123;1:-"eth0"&#125;</span><br><span class="line"> if cf_is_linux &gt;/dev/null; then</span><br><span class="line"> [ ! -d /sys/class/net/$eth ] &amp;&amp; echo "network interface not exists." &amp;&amp; return 1</span><br><span class="line"> while true; do</span><br><span class="line"> local r1=`cat /sys/class/net/$eth/statistics/rx_bytes`</span><br><span class="line"> local t1=`cat /sys/class/net/$eth/statistics/tx_bytes`</span><br><span class="line"> sleep 1</span><br><span class="line"> local r2=`cat /sys/class/net/$eth/statistics/rx_bytes`</span><br><span class="line"> local t2=`cat /sys/class/net/$eth/statistics/tx_bytes`</span><br><span class="line"> local rkbps=`cf_calc "( $r2 - $r1 ) / 1024"`</span><br><span class="line"> local tkbps=`cf_calc "( $t2 - $t1 ) / 1024"`</span><br><span class="line"> echo "$eth: RX $rkbps kB/s TX $tkbps kB/s"</span><br><span class="line"> done</span><br><span class="line"> elif cf_is_darwin &gt;/dev/null; then</span><br><span class="line"><span class="meta"> #</span><span class="bash"> `netstat -I eth0 -w 1` or `nettop -n -m tcp`</span></span><br><span class="line"> declare -a tuple</span><br><span class="line"> local _i1=0</span><br><span class="line"> cf_is_zsh &gt;/dev/null &amp;&amp; _i1=1</span><br><span class="line"> local _i2=1</span><br><span class="line"> cf_is_zsh &gt;/dev/null &amp;&amp; _i1=2</span><br><span class="line"> while true; do</span><br><span class="line"> tuple=( $(netstat -nbi -I $eth | tail -1 | awk '&#123;print $7,$10&#125;') )</span><br><span class="line"> local r1=$&#123;tuple[$_i1]&#125;</span><br><span class="line"> local t1=$&#123;tuple[$_i2]&#125;</span><br><span class="line"> sleep 1</span><br><span class="line"> tuple=( $(netstat -nbi -I $eth | tail -1 | awk '&#123;print $7,$10&#125;') )</span><br><span class="line"> local r2=$&#123;tuple[$_i1]&#125;</span><br><span class="line"> local t2=$&#123;tuple[$_i2]&#125;</span><br><span class="line"> local rkbps=`cf_calc "( $r2 - $r1 ) / 1024"`</span><br><span class="line"> local tkbps=`cf_calc "( $t2 - $t1 ) / 1024"`</span><br><span class="line"> echo "$eth: RX $rkbps kB/s TX $tkbps kB/s"</span><br><span class="line"> done</span><br><span class="line"> else</span><br><span class="line"> echo "unsupported os" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_traffic_by_pid() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line"><span class="meta"> #</span><span class="bash"> kernel 2.6.18 not support, must 2.6.32 or later?</span></span><br><span class="line"> local pf="/proc/$pid/net/netstat"</span><br><span class="line"> [ ! -f $pf ] &amp;&amp; echo "$pf not found!" &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line"> declare -a tuple</span><br><span class="line"> local _i1=0</span><br><span class="line"> cf_is_zsh &gt;/dev/null &amp;&amp; _i1=1</span><br><span class="line"> local _i2=1</span><br><span class="line"> cf_is_zsh &gt;/dev/null &amp;&amp; _i1=2</span><br><span class="line"> local pname="$(cf_ps_name $pid)"</span><br><span class="line"> while true; do</span><br><span class="line"> tuple=( $(grep "IpExt: " $pf | awk 'NR==2&#123;print $8,$9&#125;') )</span><br><span class="line"> local r1=$&#123;tuple[$_i1]&#125;</span><br><span class="line"> local t1=$&#123;tuple[$_i2]&#125;</span><br><span class="line"> sleep 1</span><br><span class="line"> tuple=( $(grep "IpExt: " $pf | awk 'NR==2&#123;print $8,$9&#125;') )</span><br><span class="line"> local r2=$&#123;tuple[$_i1]&#125;</span><br><span class="line"> local t2=$&#123;tuple[$_i2]&#125;</span><br><span class="line"> local rkbps=`cf_calc "( $r2 - $r1 ) / 1024"`</span><br><span class="line"> local tkbps=`cf_calc "( $t2 - $t1 ) / 1024"`</span><br><span class="line"> echo "$pname: IN $rkbps kB/s OUT $tkbps kB/s"</span><br><span class="line"> done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_iotop() &#123;</span><br><span class="line"> sudo iotop -bod1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_check_sum() &#123;</span><br><span class="line"> local dir=$&#123;1:-$PWD&#125;</span><br><span class="line"> local dirsum=0</span><br><span class="line"> for sum  in $(find $&#123;dir&#125; -type f -print0 | xargs -0 cksum | awk '&#123;print $1&#125;')</span><br><span class="line"> do</span><br><span class="line"> dirsum=$(( $&#123;sum&#125; + $&#123;dirsum&#125; ))</span><br><span class="line"> done</span><br><span class="line"> echo $&#123;dirsum&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_java_classpath_check() &#123;</span><br><span class="line"> [ $# -eq 0 ] &amp;&amp; echo "please enter classpath dir" &amp;&amp; return 1</span><br><span class="line"> [ ! -d "$1" ] &amp;&amp; echo "not a directory" &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line"> local tmpfile="/tmp/.cp$(date +%s)"</span><br><span class="line"> local tmphash="/tmp/.hash$(date +%s)"</span><br><span class="line"> local verbose="/tmp/cp-verbose.log"</span><br><span class="line"></span><br><span class="line"> if cf_is_zsh &gt;/dev/null;then</span><br><span class="line"> local -a files</span><br><span class="line"> local begin=1</span><br><span class="line"> elif cf_is_bash &gt;/dev/null;then</span><br><span class="line"> declare -a files</span><br><span class="line"> local begin=0</span><br><span class="line"> else </span><br><span class="line"> echo "unsupported shell" &amp;&amp; return 1</span><br><span class="line"> fi</span><br><span class="line"> files=(`find "$1" -name "*.jar"`)</span><br><span class="line"></span><br><span class="line"> for f in $files; do</span><br><span class="line"> jarName=`basename $f`</span><br><span class="line"> list=`unzip -l $f | awk -v fn=$jarName '/\.class$/&#123;print $NF,fn&#125;'`</span><br><span class="line"> size=`echo "$list" | wc -l`</span><br><span class="line"> echo $jarName $size &gt;&gt; $tmphash</span><br><span class="line"> echo "$list"</span><br><span class="line"> done | sort | awk 'NF&#123; a[$1]++;m[$1]=m[$1]","$2&#125;END&#123;for(i in a) if(a[i] &gt; 1) print i,substr(m[i],2)&#125;' &gt; $tmpfile</span><br><span class="line"></span><br><span class="line"> awk '&#123;print $2&#125;' $tmpfile | awk -F',' '&#123;i=1;for(;i&lt;=NF;i++) for(j=i+1;j&lt;=NF;j++) print $i,$j&#125;' | sort | uniq -c | sort -nrk1 | </span><br><span class="line"> while read line; do</span><br><span class="line"> local dup=$&#123;line%% *&#125;</span><br><span class="line"> local jars=$&#123;line#* &#125;</span><br><span class="line"> local jar1=$&#123;jars% *&#125;</span><br><span class="line"> local jar2=$&#123;jars#* &#125;</span><br><span class="line"> local len_jar1=`grep -F "$jar1" $tmphash | grep ^"$jar1" | awk '&#123;print $2&#125;'`</span><br><span class="line"> local len_jar2=`grep -F "$jar2" $tmphash | grep ^"$jar2" | awk '&#123;print $2&#125;'`</span><br><span class="line"> local len=$(($len_jar1 &gt; $len_jar2 ? $len_jar1 : $len_jar2))</span><br><span class="line"> local per=$(echo "scale=2; $dup/$len" | bc -l)</span><br><span class="line"> echo $&#123;per/./&#125; $dup $jar1 $jar2</span><br><span class="line"> done | sort -nr -k1 -k2 | awk 'NR==1&#123;print "Similarity DuplicateClasses File1 File2"&#125;&#123;print "%"$0&#125;'| column -t</span><br><span class="line"></span><br><span class="line"> sort $tmpfile | awk '&#123;print $1,"\n\t\t",$2&#125;' &gt; $verbose</span><br><span class="line"> echo "See $verbose for more details."</span><br><span class="line"></span><br><span class="line"> rm -f $tmpfile</span><br><span class="line"> rm -f $tmphash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_java_class_find() &#123;</span><br><span class="line"> local libdir=$1</span><br><span class="line"> local name=$2</span><br><span class="line"> local glob=$(cf_is_glob_enabled)</span><br><span class="line"> [ $glob = "false" ] &amp;&amp; cf_enable_glob</span><br><span class="line"> builtin pushd $libdir &gt;/dev/null</span><br><span class="line"> for j in *.jar; do</span><br><span class="line"> unzip -l $j | grep $name &amp;&amp; echo $j;</span><br><span class="line"> done</span><br><span class="line"> builtin popd &gt;/dev/null</span><br><span class="line"> [ $glob = "false" ] &amp;&amp; cf_disable_glob</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_java_pids() &#123;</span><br><span class="line"> ps x | grep "jav[a]" | awk '&#123;print $1&#125;'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_java_infos() &#123;</span><br><span class="line"> for p in `cf_java_pids`; do</span><br><span class="line"> echo "java pid: $p"</span><br><span class="line"> info=`ps -opid=,command= -p $p | tr ' ' '\n' | awk '/-classpath|-cp/&#123;getline;next&#125;;/-Xmx|-Dcatalina.base/&#123;print&#125;;/^-/&#123;next&#125;;1' | xargs`</span><br><span class="line"> echo "  $info"</span><br><span class="line"> time=`cf_ps_time $p`</span><br><span class="line"> echo "  $time"</span><br><span class="line"> done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_java_threads() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> local vm_threads="GC task|VM |CompilerThread|Finalizer|Reference Handler|Signal Dispatcher"</span><br><span class="line"> "$JAVA_HOME"/bin/jstack $pid | grep "^\"" | grep -Ev "$vm_threads"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_java_sysprops() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> "$JAVA_HOME"/bin/jinfo -sysprops $pid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_jstack_series() &#123;</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> local count=$&#123;2:-5&#125;  # defaults 5 times</span><br><span class="line"> local delay=$&#123;3:-0.5&#125; # defaults 0.5 seconds</span><br><span class="line"></span><br><span class="line"> local logdir=$&#123;LOG_DIR:-"/tmp"&#125;</span><br><span class="line"> while [ $count -gt 0 ]; do</span><br><span class="line"> if cf_is_gnu_date &gt;/dev/null; then </span><br><span class="line"> local suffix=$(date +%H%M%S.%N)</span><br><span class="line"> else</span><br><span class="line"> local suffix=$(date +%H%M%S)"."$count</span><br><span class="line"> fi</span><br><span class="line"> "$JAVA_HOME"/bin/jstack $pid &gt; $logdir/jstack.$pid.$suffix</span><br><span class="line"> sleep $delay</span><br><span class="line"> let count--</span><br><span class="line"> echo -n "."</span><br><span class="line"> done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_dmesg() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"></span><br><span class="line"> dmesg -T "$@" 2&gt;/dev/null</span><br><span class="line"> [ $? -eq 0 ] &amp;&amp; return 0</span><br><span class="line"></span><br><span class="line"> dmesg "$@" | perl -w -e 'use strict;</span><br><span class="line"> my ($uptime) = do &#123; local @ARGV="/proc/uptime";&lt;&gt;&#125;; ($uptime) = ($uptime =~ /^(\d+)\./);</span><br><span class="line"> foreach my $line (&lt;&gt;) &#123;</span><br><span class="line"> printf( ($line=~/^\[\s*(\d+)\.\d+\](.+)/) ? ( "[%s]%s\n", scalar localtime(time - $uptime + $1), $2 ) : $line )</span><br><span class="line"> &#125;'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_http_request() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e read -s 2000 -qftp $pid 2&gt;&amp;1 | grep " HTTP/1[.][01][\]r[\]n" </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_http_response() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e write -s 2000 -qftp $pid 2&gt;&amp;1 | grep "HTTP/1[.][01] " </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_http_req_header() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e read -s 2000 -qftp $pid 2&gt;&amp;1 | grep " HTTP/1[.][01][\]r[\]n" | sed  's/\\r\\n/\n/g'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_http_resp_header() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e write -s 2000 -qftp $pid 2&gt;&amp;1 | grep "HTTP/1[.][01] " | sed 's/\\r\\n/\n/g'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_http_invoke() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e sendto -s 2000 -qftp $pid 2&gt;&amp;1 | grep " HTTP/1[.][01][\]r[\]n" </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_connect() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e connect -s 2000 -qftp $pid 2&gt;&amp;1 | grep "port"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_socket() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e connect,socket,close -s 2000 -qftp $pid 2&gt;&amp;1 | grep "port"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_sql_select() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e sendto,write -s 2000 -qftp $pid 2&gt;&amp;1 | grep -i "[\]3select"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_sql_update() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e sendto,write -s 2000 -qftp $pid 2&gt;&amp;1 | grep -i "[\]3update"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_sql_insert() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e sendto,write -s 2000 -qftp $pid 2&gt;&amp;1 | grep -i "[\]3insert"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_redis_command() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> local cmd=$2</span><br><span class="line"> strace -e sendto,write -s 2000 -qftp $pid 2&gt;&amp;1 | grep -i "$cmd[\]r[\]n"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_dubbo_request() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e read -s 2000 -qftp $pid 2&gt;&amp;1 | grep -i "[\]tinterface"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_dubbo_invoke() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> strace -e write -s 2000 -qftp $pid 2&gt;&amp;1 | grep -i "[\]tinterface"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_trace_system_call() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> local pid=$1</span><br><span class="line"> ! cf_is_pid_exists &gt;/dev/null $pid &amp;&amp; echo "pid:$pid not exists" &amp;&amp; return 1</span><br><span class="line"> local time=$&#123;2:-5&#125;</span><br><span class="line"></span><br><span class="line"> local outfile="/tmp/.sys-call.$pid"</span><br><span class="line"> strace -cqftp $pid -o $outfile &amp; </span><br><span class="line"> local spid=$!</span><br><span class="line"> while [ $time -gt 0 ]; do</span><br><span class="line"> sleep 1</span><br><span class="line"> let time--</span><br><span class="line"> echo -n "."</span><br><span class="line"> done</span><br><span class="line"> echo ""</span><br><span class="line"> kill $spid &amp;&amp; echo "ok"</span><br><span class="line"><span class="meta"> #</span><span class="bash"> <span class="keyword">if</span> strace process still exists</span></span><br><span class="line"> cf_is_pid_exists $spid &gt;/dev/null 2&gt;&amp;1 &amp;&amp; kill -9 $spid</span><br><span class="line"> cat $outfile &amp;&amp; rm -f $outfile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_random_entropy_stat() &#123;</span><br><span class="line"> ! cf_is_linux &gt;/dev/null &amp;&amp; echo "only works in linux" &amp;&amp; return 1</span><br><span class="line"> while true; do</span><br><span class="line"> echo "entropy available:" `cat /proc/sys/kernel/random/entropy_avail`</span><br><span class="line"> sleep 1</span><br><span class="line"> done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_json_fmt() &#123;</span><br><span class="line"> python -mjson.tool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cf_http_server() &#123;</span><br><span class="line"> local port=$&#123;1:-8000&#125;</span><br><span class="line"> python -mSimpleHTTPServer $port 2&gt;/dev/null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派使用技巧</title>
    <url>/2019/01/30/2019-01-30-%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p>使用指南<p></p>
<ul>
<li>初次安装树莓派可以准备一根网线，以便方便连接进入 ssh</li>
<li>树莓派的镜像版本默认是没有开启 ssh 的，若想开启，在 <code>boot</code> 下创建 <code>ssh</code> 文件夹即可</li>
<li>初次使用网线进行连接时，可以将树莓派设置成静态 ip，在 <code>cmdline.txt</code> 文件里面加入 <code>ip=x.x.x.x</code></li>
<li>无线连接在 <code>boot</code>下创建 <code>wpa_supplicant.conf</code>文件，会映射到 <code>/etc</code>下面，以便配置你的无线连接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">network=&#123;</span><br><span class="line"> ssid="wifi名称"</span><br><span class="line"> psk ="wifi密码" </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase rest api</title>
    <url>/2018/06/18/2018-06-18-Hbase-rest-api/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p>Hbase Rest API<br>Hbase Rest 服务默认是不启动的<p></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 前台启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台启动</span></span><br></pre></td></tr></table></figure>

</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>Hbase</category>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>hbase,BigData</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hive正确导出csv的姿势</title>
    <url>/2018/04/02/2018-04-02-hive-export-csv/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h3 id="使用Hive导出csv"><a href="#使用Hive导出csv" class="headerlink" title="使用Hive导出csv"></a>使用Hive导出csv<p>大家在导出csv后，使用Excel大家文件的时候，会遇到这样的问题，文件的存在少量串行的数据，虽然不影响整体数据，但是有的时候遇到高精度计算的过程中，还是难免有些尴尬😅</p>
<ol>
<li>导出的时候进行转义</li>
<li>导出的时候使用其他格式，在Excel中使用 数据-&gt;文件-&gt;自文本导入 使用自定义格式导入</li>
<li>使用Hive序列化导入,会自动规整格式<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  wys.wys_output</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE <span class="string">'org.apache.hadoop.hive.serde2.OpenCSVSerde'</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (</span><br><span class="line"><span class="string">"separatorChar"</span> = <span class="string">","</span>,</span><br><span class="line"><span class="string">"quoteChar"</span>  = <span class="string">"\""</span>,</span><br><span class="line"><span class="string">"escapeChar"</span>  = <span class="string">"\""</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE</span><br><span class="line"><span class="keyword">as</span>   <span class="keyword">select</span></span><br><span class="line">  <span class="keyword">distinct</span></span><br><span class="line">  a,</span><br><span class="line">  b</span><br><span class="line">  <span class="keyword">from</span> xxx;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Excel中csv格式中会出现\n 使用rtrim和ltrim可以去除,每一列数据都是以<code>&quot;</code>分割数据,但是在数据出现<code>&quot;</code>号的话就会导致数据串行,此时我们可以使用<code>&quot;&quot;</code>来代表那是数据中双引号</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>Hive</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive,BigData,csv</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark  Shuffle总结</title>
    <url>/2018/02/04/2018-02-04-spark-shuffle-summary/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h2 id="Spark-Shuffle的过程："><a href="#Spark-Shuffle的过程：" class="headerlink" title="Spark  Shuffle的过程："></a>Spark  Shuffle的过程：<p>1.1 以前 Hash Shuffle<br>1.1.x 添加Sort Shuffle<br>1.5.x 添加Unsafe Shuffle<br>1.6.x 合并Unsafe Shuffle和Sort Shuffle<br>2.0.x 移除Hash Shuffle</p>
<a id="more"></a>

<h4 id="Hash-Shuffle-v1："><a href="#Hash-Shuffle-v1：" class="headerlink" title="Hash Shuffle v1："></a>Hash Shuffle v1：</h4><p>每个map会为下游stage的partition写一个文件，如果有1000个分区的话会生成m×1000个临时文件，一般来说excutor都会运行多个task，另一方面一个excutor都有K个Core，那么会申请KN个文件描述符，一旦partition较多，必定会耗尽，同事也会带来 内存消耗</p>
<p>在reduce阶段会拉取上游产生的数据，所有的文件都需要网络来传输，又涉及到大量的文件描述符，如果reduce段有combiner的操作，需要将网络上的数据保存到HashMap中进行合并，数据量大必定会OOM</p>
<h4 id="Hash-Shuffle-v2："><a href="#Hash-Shuffle-v2：" class="headerlink" title="Hash Shuffle v2："></a>Hash Shuffle v2：</h4><p>在上面生成分区文件的过程中每个excutor只生成n个partition文件，对其他task生成partition进行和并，在reduce端读取分区文件的过程中，势必会造成OOM</p>
<h4 id="Sort-Shuffle-v1："><a href="#Sort-Shuffle-v1：" class="headerlink" title="Sort Shuffle v1："></a>Sort Shuffle v1：</h4><p>受Hadoop MapReduce Shuffle的影响，引入Sort Shuffle</p>
<p>在map端会按照partition id和key进行排序，将所有分区的数据写在同一个文件中，该记录首先会按照分区id顺序排序，每个分区内部按照key进行排序，map task期间会顺序写每个分区的数据，并通过索引数据记录每个分区的大小个偏移量，一个map task只开两个文件描述符，即使有K个core，也只有k×2个文件描述符</p>
<p>在Reduce阶段，做reduce combiner时使用ExternalAppendOnlyMap，在大数据量的情况下，做combiner时如果内存不够，会刷写磁盘，避免了OOM</p>
<p>解决了Hash Shuffle的弊端，但是在Shuffle过程中要对数据进行排序，所以性能有所损失</p>
<h4 id="Unsafe-Shuffle："><a href="#Unsafe-Shuffle：" class="headerlink" title="Unsafe Shuffle："></a>Unsafe Shuffle：</h4><p>钨丝计划重在解决内存和CPU的使用，刚开始是在优化Spark SQL，Shuffle也因此受益，做法是直接在序列化的二进制数据上面进行排序，减少了内存的使用和GC，在排序中使用cache-efficient sorter，使用8byte的指针，把排序转化为指针数组的排序</p>
<p>但是使用Unsafe Shuffle有几个限制，shuffle阶段不能有aggregate操作，分区数不能超过一定大小(224−1，这是可编码的最大parition id)，所以像reduceByKey这类有aggregate操作的算子是不能使用Unsafe Shuffle，它会退化采用Sort Shuffle。</p>
<h4 id="Sort-Shuffle-v2："><a href="#Sort-Shuffle-v2：" class="headerlink" title="Sort Shuffle v2："></a>Sort Shuffle v2：</h4><p>在满足Unsafe Shuffle 的情况下自动使用，否则使用Sort Shuffle，从spark 2.0后移除了Hash Shuffle 也就是只有Sort Shuffle v2</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>spark</tag>
        <tag>shuffle</tag>
        <tag>Hash Shuffle</tag>
        <tag>Sort Shuffle</tag>
      </tags>
  </entry>
  <entry>
    <title>百度高级搜索</title>
    <url>/2017/12/15/2017-12-15-baidu-advanced-search/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h4 id="搜索标题内限定的字符"><a href="#搜索标题内限定的字符" class="headerlink" title="搜索标题内限定的字符"></a>搜索标题内限定的字符<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx intitle:xxx</span><br></pre></td></tr></table></figure>

<h4 id="只搜索特定站点的数据（只写域名）"><a href="#只搜索特定站点的数据（只写域名）" class="headerlink" title="只搜索特定站点的数据（只写域名）"></a>只搜索特定站点的数据（只写域名）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx site:xxx</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h4 id="URL必须出现的内容"><a href="#URL必须出现的内容" class="headerlink" title="URL必须出现的内容"></a>URL必须出现的内容</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx inurl:xxx</span><br></pre></td></tr></table></figure>

<h4 id="搜索都一个词，排除第二个词的搜索"><a href="#搜索都一个词，排除第二个词的搜索" class="headerlink" title="搜索都一个词，排除第二个词的搜索"></a>搜索都一个词，排除第二个词的搜索</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx -xxx</span><br></pre></td></tr></table></figure>

<h4 id="搜索第一个词，必须包含第二个词"><a href="#搜索第一个词，必须包含第二个词" class="headerlink" title="搜索第一个词，必须包含第二个词"></a>搜索第一个词，必须包含第二个词</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx +xxx</span><br></pre></td></tr></table></figure>

<h4 id="搜索特定文档的数据"><a href="#搜索特定文档的数据" class="headerlink" title="搜索特定文档的数据"></a>搜索特定文档的数据</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx filetype:xxx</span><br></pre></td></tr></table></figure>

<p>** 双引号“”和书名号《》和括号()精确匹配 **</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>测试加密文档</title>
    <url>/2017/12/14/2017-12-14-test-password/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 查看这个博客请数据密码 wissy " /> <label for="pass"> 查看这个博客请数据密码 wissy </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+1lT1PyfGddXIG4imNkyl2TtyVGF89eOnZ7a2lVQ7rOvfG3hFpOAgIHVLFaFcsP/KHjfBWf9rkaqh4v9U9t7HI5CVX/rqmnKhn2VGnO/YkD0HCdyeCCGo5fGy8EudNIaoeteIrL3PGdzN1On3wQpD1DwDpMDmXq4w1fnyRsv1B9G1ti0ejLXSBOkpbmfNlOuwL/MLM4JAys53ZWc6SQtbApRyhl1JWJ9q2dpNKRLknYSFjTbMnMxS2IofV91TaFIq3fv7rmswUK3WKKwiyIvB+wzvSod1tO+1LdE4NCAed4ZNv73o6zKPJYEfXiVZIHYGSQVidH2OUAng0C6QCMJXazxVu7umgMQCpTlWVsKuqRqivBrRpJj4oRb1ypnS4h6At/NM+6XJgxXo3wvMeN8at8DDCB8NjF1AC5dxK/tZy36rKo8kuqvKFTfUOh+bp4bLva/B3By0RLgrjy83K5YovIADrjwRsnJO17dcnoSES6iao6JVSipa/MS35JYC5I0snqcMBD+j0SIF/zK97PPLxWBQCHUw5HIBubNCFkpTY/VZiWU21qA0asRBR+mFnxm8KHS7CHogg+CjdKX1DC0GCskO+ryLZSbDIFF9/np0E49zgtdXXNDw6L5+u0JrmJ8Ii7+nsuio5caUjm0xNNwPrj4ySZKPVQfCq+w27Qrkj1RBRsTfNurPzxc2e+K5/n0HsvQau2irh/y4uU0NjWSRs2rl6fXwlny4ZwupLH0Zl8gmCQ40GNpv+mUPBv4asK8/M4deENyRqxRmctQkU/1x/OLLzKnRaDZiHngrsxhS6NZ2DDgYLMZFJQ9oF1WKPHY5zjyx2skVTV1PAwLR2K2kEmP6/s9jonaa3UBJOv+quNzl0/bXACGxiiu2vh5VOhyoQrR1IKA01EoZnFyqh8IwixApd9OHd4Ha+IuonhU1rkiio23zsTk3AFQJbdjtRzUEJAgkL+J+kG96y1luPHMBnt/+jQHeDoqnmNu0ZnhoSKCyiWlxSPV3X8IBY2sZ1tR6vlnnRZaoNCg5NjupTX0zCyPAC7mAhQ89gZkFU+btAzU7zYwCrnuevnUXSjEuRvs0g+6xRyt1ltzdJdFlbwRqL6SmYmPOT+MhzSi6dfHQ49PcJmdbhaqwBYxtGObAfTR4vUctLEUY/ha3x6T+L+XcRM1GiqZlwdE/dLtljHuuuGTH4l7tPJTMW2FcjiIUpwpCDmzsuYtw4FvXiMghZhEieOTvch+TEW5/wdn6fFz4QVuEngOuIcpLL </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2017/12/12/2017-12-12-Test/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h4 id="上标与下标（脚标与眉标）"><a href="#上标与下标（脚标与眉标）" class="headerlink" title="上标与下标（脚标与眉标）"></a>上标与下标（脚标与眉标）<h6 id="H20"><a href="#H20" class="headerlink" title="H20"></a>H<sub>2</sub>0</h6><h6 id="29th"><a href="#29th" class="headerlink" title="29th"></a>29<sup>th</sup></h6><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a><ins>测试</ins></h6><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><div id="flowchart-0" class="flow-chart"></div>

<h4 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h4><div id="sequence-0"></div>


<h4 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h4><a href="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3aSaZDIm7o0G00" class="gallery-item" target="_blank" rel="noopener"><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3aSaZDIm7o0G00"></a>
#### 不同的代码高亮
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">"bar"</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">"bar"</span>;</span><br></pre></td></tr></table></figure>

<script>var foo = "bar";</script>

<script>var foo = "bar";</script>
<a id="more"></a>
<h4 id="MarkDown-格式测试"><a href="#MarkDown-格式测试" class="headerlink" title="MarkDown 格式测试"></a>MarkDown 格式测试</h4><p>basic footnote<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="basic footnote content
">[1]</span></a></sup><br>here is an inline footnote<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="inline footnote">[2]</span></a></sup><br>and another one<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="paragraph
footnote
content
">[3]</span></a></sup><br>and another one<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="footnote content with some [markdown](https://en.wikipedia.org/wiki/Markdown)">[4]</span></a></sup></p>
<h5 id="测试pdf"><a href="#测试pdf" class="headerlink" title="测试pdf"></a>测试pdf</h5>

	<div class="row">
    <embed src="./bash_freshman.pdf" width="100%" height="550" type="application/pdf">
	</div>





<h4 id="Echars3-测试"><a href="#Echars3-测试" class="headerlink" title="Echars3 测试"></a>Echars3 测试</h4><p>教程文档[<a href="http://kchen.cc/2016/11/05/echarts-in-hexo/]" target="_blank" rel="noopener">http://kchen.cc/2016/11/05/echarts-in-hexo/]</a></p>
<div id="echarts6502" style="width: 85%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts6502'));

        // 指定图表的配置项和数据
        var option = {
    tooltip : {
        trigger: 'axis',
        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
            type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
        }
    },
    legend: {
        data:['利润', '支出', '收入']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    xAxis : [
        {
            type : 'value'
        }
    ],
    yAxis : [
        {
            type : 'category',
            axisTick : {show: false},
            data : ['周一','周二','周三','周四','周五','周六','周日']
        }
    ],
    series : [
        {
            name:'利润',
            type:'bar',
            itemStyle : {
                normal: {
                    label: {show: true, position: 'inside'}
                }
            },
            data:[200, 170, 240, 244, 200, 220, 210]
        },
        {
            name:'收入',
            type:'bar',
            stack: '总量',
            itemStyle: {
                normal: {
                    label : {show: true}
                }
            },
            data:[320, 302, 341, 374, 390, 450, 420]
        },
        {
            name:'支出',
            type:'bar',
            stack: '总量',
            itemStyle: {normal: {
                label : {show: true, position: 'left'}
            }},
            data:[-120, -132, -101, -134, -190, -230, -210]
        }
    ]
};

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>

<h4 id="测试Hit"><a href="#测试Hit" class="headerlink" title="测试Hit"></a>测试Hit</h4><a href="javascript:void(0);" class="hint--top hint--rounded hint--info" aria-label="Hexo" target="_blank" rel="noopener">A fast, simple & powerful blog framework</a>
<a href="javascript:void(0);" class="hint--top hint--rounded hint--info" aria-label="I'm a Text" target="_blank" rel="noopener">I'm the Hint</a>
<a href="javascript:void(0);" class="hint--top hint--rounded hint--info" aria-label="misfits" target="_blank" rel="noopener">hexo-tag-hint</a>


<h4 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h4><h5 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h5><div class="mermaid">
         graph TB
           subgraph one
           a1-->a2
           end
           subgraph two
           b1-->b2
           end
           subgraph three
           c1-->c2
           end
           c1-->a2
</div>

<script src="https://unpkg.com/mermaid@7.1.0/src/mermaidAPI.js"></script>

<div id="graphDiv">
</div>


<h4 id="测试html5viedo"><a href="#测试html5viedo" class="headerlink" title="测试html5viedo"></a>测试html5viedo</h4><video width="100%" height="250px" controls><source src="  " type="video/webm"> Your browser does not support the webm tag.</video>

<p>Usage: With no args, the defaults are used: width = ‘100%’ height = ‘250px’ codec = ‘video/webm’</p>
<video width="100%" height="250px" controls><source src="  " type="video/webm"> Your browser does not support the webm tag.</video>

<p>or with args:</p>
<video width="100%" height="500px" controls><source src="  " type="video/mp4"> Your browser does not support the webm tag.</video>


#### 测试youku视频
https://v.youku.com/v_show/id_XMTQ2MjU2NTU2OA==.html
<video width="100%" height="500px" controls><source src="  " type="video/mp4"> Your browser does not support the webm tag.</video>


<h4 id="git版本图测试"><a href="#git版本图测试" class="headerlink" title="git版本图测试"></a>git版本图测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gitgraph %&#125;</span><br><span class="line"></span><br><span class="line">git commit -am &apos;aaaaa&apos;</span><br><span class="line">git commit -m &apos;bbbb&apos;</span><br><span class="line">git checkout -b test</span><br><span class="line">git checkout -b test1</span><br><span class="line">git checkout -b test1 sdfsfa</span><br><span class="line">git checkout   test2 sdfsfa</span><br><span class="line">git checkout test2   dfdfsdfsfa</span><br><span class="line">git commit -m &apos;ccccc&apos;</span><br><span class="line">git merge master</span><br><span class="line">git commit -m &apos;ccccc&apos;</span><br><span class="line">git merge master -m &apos;dfdfsfsfsfa&apos;</span><br><span class="line">git commit -am &apos;dddddd&apos;</span><br><span class="line">git commit -am \&quot;eeeee\&quot;</span><br><span class="line">git tag -a v1.2.3 -m &apos;sfdsfsdfa&apos;</span><br><span class="line">git commit -m \&quot;fffff\&quot;</span><br><span class="line">git checkout -b test2 </span><br><span class="line">git commit -am &apos;test2&apos;</span><br><span class="line">git checkout master</span><br><span class="line">git merge test1</span><br><span class="line"></span><br><span class="line">&#123;% endgitgraph %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>aaaa<br>aaaa</p>
</blockquote>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]
e=>end: End:>http://www.google.com
op1=>operation: My Operation|past
op2=>operation: Stuff|current
sub1=>subroutine: My Subroutine|invalid
cond=>condition: Yes
or No?|approved:>http://www.google.com
c2=>condition: Good idea|rejected
io=>inputoutput: catch something...|request

st->op1(right)->cond
cond(yes, right)->c2
cond(no)->sub1(left)->op1
c2(yes)->io->e
c2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Alice->Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob-->Alice: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">basic footnote content<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">inline footnote<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">paragraph
<p>footnote<br>content<a href="#fnref:3" rev="footnote"> ↩</a></p></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">footnote content with some <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">markdown</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div><p></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 删除乱码文件</title>
    <url>/2017/12/07/2017-12-07-linux-rm-messy-code-file/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p>我们在工作的时候由于各种原因会产生乱码文件，产生的乱码的文件主要分为两种<p></p>
<ol>
<li><p>不完全乱码 如：<code>?j?</code><br> 因为我们可以看到一个字符，可以使用<code>rm -rvf *j*</code></p>
</li>
<li><p>完全乱码  如：<code>????</code><br> 像这样的数据我们就不能使用正则的方法删除文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. ls -i <span class="comment"># 查看文件inode节点数</span></span><br><span class="line">2. find ./ -inum 节点数 -<span class="built_in">exec</span> mv &#123;&#125; a.txt \; <span class="comment">#修改乱码文件为a.txt</span></span><br><span class="line">3. find ./ -inum 节点数 -<span class="built_in">exec</span> -<span class="built_in">print</span> -<span class="built_in">exec</span> rm -rvf &#123;&#125; \; <span class="comment">#删除乱码文件</span></span><br></pre></td></tr></table></figure>

<p>  例如：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wissy@wissy-PC:/tmp$ ls -i</span><br><span class="line">72294967 ?                              69156075 b.txt</span><br><span class="line">wissy@wissy-PC:/tmp$ find ./ -inum 72294967</span><br><span class="line">./?</span><br><span class="line"><span class="comment">#删除文件</span></span><br><span class="line">wissy@wissy-PC:/tmp$ find ./ -inum 72294967 -<span class="built_in">print</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line">./?</span><br><span class="line"><span class="comment">#或者重命名文件</span></span><br><span class="line">wissy@wissy-PC:/tmp$ find . -inum 69156056 -<span class="built_in">exec</span> mv &#123;&#125; file.txt \;</span><br></pre></td></tr></table></figure></li>
</ol>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>opencv mat type</title>
    <url>/2017/11/30/2017-11-30-opencv-types/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h3 id="opencv-中-mat-类-type介绍"><a href="#opencv-中-mat-类-type介绍" class="headerlink" title="opencv 中 mat 类 type介绍"></a>opencv 中 mat 类 type介绍<p>Mat在opencv中相当于一个容器，其中type是一个int值，实属于预定义的常量<br>其规则为<code>CV_位数_数据类型+通道数</code></p>
<table>
<thead>
<tr>
<th></th>
<th align="center">C1</th>
<th align="center">C2</th>
<th align="center">C3</th>
<th align="center">C4</th>
</tr>
</thead>
<tbody><tr>
<td>CV_8U</td>
<td align="center">0</td>
<td align="center">8</td>
<td align="center">16</td>
<td align="center">24</td>
</tr>
<tr>
<td>CV_8S</td>
<td align="center">1</td>
<td align="center">9</td>
<td align="center">17</td>
<td align="center">25</td>
</tr>
<tr>
<td>CV_16U</td>
<td align="center">2</td>
<td align="center">10</td>
<td align="center">18</td>
<td align="center">26</td>
</tr>
<tr>
<td>CV_16S</td>
<td align="center">3</td>
<td align="center">11</td>
<td align="center">19</td>
<td align="center">27</td>
</tr>
<tr>
<td>CV_32S</td>
<td align="center">4</td>
<td align="center">12</td>
<td align="center">20</td>
<td align="center">28</td>
</tr>
<tr>
<td>CV_32F</td>
<td align="center">5</td>
<td align="center">13</td>
<td align="center">21</td>
<td align="center">29</td>
</tr>
<tr>
<td>CV_64F</td>
<td align="center">6</td>
<td align="center">14</td>
<td align="center">22</td>
<td align="center">30</td>
</tr>
</tbody></table>
<p>0-30是type对应的int值</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>代码片段</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构笔记</title>
    <url>/2017/09/28/2017-09-28-study-data-structure%20/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <ul>
<li>数据结构是相互之间存在着某种逻辑关系的数据元素的集合</li>
<li>数据的逻辑结构主要分为四类（线性结构，树性结构，图结构或者网状结构，集合结构）<ul>
<li>线性结构：具有前后顺序关系</li>
<li>树性结构：具有后续</li>
<li>图结构或网状结构：具有网状结构</li>
<li>集合元素：在集合中的元素是相对独立的，他们之间没有这些关系的限定</li>
</ul>
</li>
<li>数据结构是一个二元组：Data_Structures=(D,S)<br>  其中：D是数据元素的有限集。<pre><code>S是D上关系的有限集。</code></pre><a id="more"></a></li>
<li>数据的存储结构：逻辑结构在计算机中表示<ul>
<li>数据元素的映象方法：例如：用二进制（bit）的位串表示数据元素</li>
<li>关系的映象方法：在计算机中有两种不同的方法：顺序映象和非顺序映象，并由此得到两种不同的存储结构：顺序存储结构和链式存储结构。<ul>
<li>顺序存储结构：以相对的存储位置表示后继关系，例如：C语言的数组</li>
<li>链式存储结构：以附加信息（指针）表示后继关系，需要永一个和x在一起的附加信息指示y的存储位置，例如：C语言的指针类型</li>
</ul>
</li>
</ul>
</li>
<li>数据类型：是一个值的集合在定义在此集合上的一组操作的总称</li>
<li>抽象数据类型：是指一个数学模型以及定义在此数学模型上的一组操作</li>

<h6 id="算法和算法分析"><a href="#算法和算法分析" class="headerlink" title="算法和算法分析"></a>算法和算法分析</h6><ul>
<li>算法是对特定问题求解的一种描述，它是指令的有限序列，其中每一条指令表示一个或多个操作，一个算法必须满足一下五个重要特征：<ol>
<li>有穷性：对于任意一组合法输入值，在执行有穷步骤之后一点能结束，即：算法中的每个步骤能在有限时间内完成。</li>
<li>确定性</li>
<li>可行性</li>
<li>输入</li>
<li>输出</li>
</ol>
</li>
</ul>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>每日一学</category>
      </categories>
      <tags>
        <tag>大战数据结构</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 列转行实现</title>
    <url>/2017/09/27/2017-09-27-column2-row/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h5 id="Hive-列转行"><a href="#Hive-列转行" class="headerlink" title="Hive 列转行"></a>Hive 列转行<p>使用concat_ws()函数可以实现多列转一行数据实现<br>collect_set函数为去重函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> f1,<span class="keyword">concat_ws</span>(<span class="string">','</span>,collect_set(f3)) <span class="keyword">from</span> a <span class="keyword">group</span> <span class="keyword">by</span> f1;</span><br><span class="line">a 1</span><br><span class="line">a 2</span><br><span class="line">a 3</span><br><span class="line"></span><br><span class="line">a 1,2,3</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>代码片段</category>
      </categories>
      <tags>
        <tag>hive</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 行转列实现</title>
    <url>/2017/09/27/2017-09-27-row-2-column/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h5 id="Hive-行转列"><a href="#Hive-行转列" class="headerlink" title="Hive 行转列"></a>Hive 行转列<p>使用LATERAL VIEW explode</p>
<p>LATERAL VIEW 可以和split 和 explode一起等 UDTF 用于讲一行才分为多行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="keyword">id</span>,filed2 <span class="keyword">from</span> test5_text a  <span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(collect_set(<span class="keyword">split</span>(a.msg,<span class="string">','</span>))) table1 <span class="keyword">as</span> filed2  <span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">a 1,2,3</span><br><span class="line"></span><br><span class="line">a 1</span><br><span class="line">a 2</span><br><span class="line">a 3</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>代码片段</category>
      </categories>
      <tags>
        <tag>hive</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>WebHDFS REST API</title>
    <url>/2017/09/25/2017-09-25-WebHDFS-REST-API/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明<p>master webhdfs端口:50070<br>dataNode webhdfs端口:70075</p>
<h3 id="创建文件并写入数据"><a href="#创建文件并写入数据" class="headerlink" title="创建文件并写入数据"></a>创建文件并写入数据</h3><ol>
<li><p>创建HDFS文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT "http://masterHost:masterPort/webhdfs/v1/文件夹?op=CREATE"</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Location地址并 上传数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT "http://dataHost:dataPort/webhdfs/v1/文件夹?op=CREATE..."</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>
<p>例如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    wissy@wissy-PC:~$ curl -i -X PUT "http://master:50070/webhdfs/v1/data/wissy/test?op=CREATE"</span><br><span class="line">    HTTP/1.1 307 TEMPORARY_REDIRECT</span><br><span class="line">    Cache-Control: no-cache</span><br><span class="line">    Expires: Mon, 25 Sep 2017 08:54:53 GMT</span><br><span class="line">    Date: Mon, 25 Sep 2017 08:54:53 GMT</span><br><span class="line">    Pragma: no-cache</span><br><span class="line">    Expires: Mon, 25 Sep 2017 08:54:53 GMT</span><br><span class="line">    Date: Mon, 25 Sep 2017 08:54:53 GMT</span><br><span class="line">    Pragma: no-cache</span><br><span class="line">    Content-Type: application/octet-stream</span><br><span class="line">    X-FRAME-OPTIONS: SAMEORIGIN</span><br><span class="line">    Location: http://node7:50075/webhdfs/v1/data/wissy/test?op=CREATE&amp;namenoderpcaddress=nameservice1&amp;overwrite=false</span><br><span class="line">    Content-Length: 0</span><br><span class="line">    Server: Jetty(6.1.26.cloudera.4)</span><br><span class="line">wissy@wissy-PC:~$ curl -i -X PUT -T c.txt  "http://node7:50075/webhdfs/v1/data/wissy/test?op=CREATE&amp;namenoderpcaddress=nameservice1&amp;overwrite=false"</span><br><span class="line">    HTTP/1.1 100 Continue</span><br><span class="line"></span><br><span class="line">    HTTP/1.1 201 Created</span><br><span class="line">    Location: hdfs://nameservice1/data/wys/test</span><br><span class="line">    Content-Length: 0</span><br><span class="line">    Connection: close</span><br></pre></td></tr></table></figure>

<h3 id="追加数据"><a href="#追加数据" class="headerlink" title="追加数据"></a>追加数据</h3><ol>
<li><p>创建HDFS文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT "http://masterHost:masterPort/webhdfs/v1/文件夹?op=APPEND"</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Location地址并 上传数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT "http://dataHost:dataPort/webhdfs/v1/文件夹?op=APPEND..."</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -L "http://masterHost:masterPort/webhdfs/v1/文件夹?op=OPEN[&amp;offset=&lt;LONG&gt;][&amp;length=&lt;LONG&gt;][&amp;buffersize=&lt;INT&gt;]"</span><br></pre></td></tr></table></figure>

<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT "http://masterHost:masterPort/文件夹?op=MKDIRS[&amp;permission=&lt;OCTAL&gt;]"</span><br></pre></td></tr></table></figure>

<h3 id="重命名文件-文件夹"><a href="#重命名文件-文件夹" class="headerlink" title="重命名文件/文件夹"></a>重命名文件/文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT "http://masterHost:masterPort/webhdfs/v1/旧路径?op=RENAME&amp;destination=新路径"</span><br></pre></td></tr></table></figure>

<h3 id="删除文件-文件夹"><a href="#删除文件-文件夹" class="headerlink" title="删除文件/文件夹"></a>删除文件/文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X DELETE "http://masterHost:masterPort/webhdfs/v1/路径?op=DELETE[&amp;recursive=&lt;true|false&gt;]"</span><br></pre></td></tr></table></figure>

<h3 id="查看文件-文件夹状态"><a href="#查看文件-文件夹状态" class="headerlink" title="查看文件/文件夹状态"></a>查看文件/文件夹状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i  "http://masterHost:masterPort/webhdfs/v1/路径?op=GETFILESTATUS"</span><br></pre></td></tr></table></figure>

<h3 id="列出文件夹下面的文件"><a href="#列出文件夹下面的文件" class="headerlink" title="列出文件夹下面的文件"></a>列出文件夹下面的文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i  "http://masterHost:masterPort/webhdfs/v1/路径?op=LISTSTATUS"</span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p>[<a href="http://hadoop.apache.org/docs/r1.0.4/webhdfs.html]" target="_blank" rel="noopener">http://hadoop.apache.org/docs/r1.0.4/webhdfs.html]</a></p>
</blockquote>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>WebHDFS</tag>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm Permission denied</title>
    <url>/2017/09/25/2017-09-25-npm-Permission-denied/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p>Npm 执行 npm install hexo-cli –save 过程中报 Permission denied 并且 使用sudo也不能解决<p></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set user 0</span><br><span class="line">npm config set unsafe-perm true</span><br></pre></td></tr></table></figure>

</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>代码片段</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 初级使用教程-Docker安装 (三)</title>
    <url>/2017/07/03/2017-07-03-ElasticSearch-introductory-install-docker/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h2 id="首先安装Docker-一般Linux发行版本中都支持Docker"><a href="#首先安装Docker-一般Linux发行版本中都支持Docker" class="headerlink" title="首先安装Docker 一般Linux发行版本中都支持Docker"></a>首先安装Docker 一般Linux发行版本中都支持Docker<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install docker</span><br><span class="line"><span class="comment">#debian</span></span><br><span class="line">apt-get install docker</span><br><span class="line"><span class="comment">#arch</span></span><br><span class="line">pac-man install docker</span><br></pre></td></tr></table></figure>

<h2 id="讲自己添加到Docker用户组中"><a href="#讲自己添加到Docker用户组中" class="headerlink" title="讲自己添加到Docker用户组中"></a>讲自己添加到Docker用户组中</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user1 为要添加的用户名 docker为Docker用户组 a为append G为group</span></span><br><span class="line">sudo usermod -aG docker user1</span><br></pre></td></tr></table></figure>

<h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新版本服务启动(centos7)</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#旧版本服务启动(centos6)</span></span><br><span class="line">service docker start</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h2 id="Docker-基本命令"><a href="#Docker-基本命令" class="headerlink" title="Docker 基本命令"></a>Docker 基本命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看Docker进程</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment">#查看所有的镜像文件</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 将远程的Docker镜像pull到本地（比较漫长，视时间和地区大小而定）</span></span><br><span class="line">docker pull imgName</span><br><span class="line"><span class="comment">#前台运行一个容器</span></span><br><span class="line">docker run -it imgName</span><br><span class="line"><span class="comment">#后台运行一个容器</span></span><br><span class="line">docker run -d imgName</span><br><span class="line"><span class="comment">#停止一个容器</span></span><br><span class="line">docker stop name|uuid</span><br></pre></td></tr></table></figure>

<h1 id="运行Docker-ES-local"><a href="#运行Docker-ES-local" class="headerlink" title="运行Docker-ES local"></a>运行Docker-ES local</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取镜像文件(存在则不会重复获取)</span></span><br><span class="line">docker pull elasticsearch</span><br><span class="line"><span class="comment">#后台运行容器 容器名：elas-local 映射容器端口9200到宿主机9200端口上</span></span><br><span class="line">docker run -d --name elas-local -p 9200:9200 elasticsearch</span><br><span class="line"><span class="comment">#停止容器</span></span><br><span class="line">docker stop elas-local</span><br></pre></td></tr></table></figure>

<h1 id="运行Docker-ES-cluster"><a href="#运行Docker-ES-cluster" class="headerlink" title="运行Docker-ES cluster"></a>运行Docker-ES cluster</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取镜像文件(存在则不会重复获取)</span></span><br><span class="line">docker pull elasticsearch</span><br><span class="line"><span class="comment">#启动集群模式（使用环境变量传入配置，默认集群名称为:elasticsearch）</span></span><br><span class="line">docker run -d --name elas-node1 -p 9200:9200 elasticsearch  -Etransport.host=127.0.0.1 -Ediscovery.zen.minimum_master_nodes=1 </span><br><span class="line">docker run -d --name elas-node2 -p 9400:9200 elasticsearch  -Etransport.host=127.0.0.1 -Ediscovery.zen.minimum_master_nodes=1 </span><br><span class="line">docker run -d --name elas-node3 -p 9600:9200 elasticsearch  -Etransport.host=127.0.0.1 -Ediscovery.zen.minimum_master_nodes=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用配置文件启动</span></span><br><span class="line">docker run -d -v <span class="string">"<span class="variable">$PWD</span>/config"</span>:/usr/share/elasticsearch/config elasticsearch</span><br><span class="line"><span class="comment">#讲数据文件另存</span></span><br><span class="line">docker run -d -v <span class="string">"<span class="variable">$PWD</span>/esdata"</span>:/usr/share/elasticsearch/data elasticsearch</span><br></pre></td></tr></table></figure>

</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 初级使用教程-集群安装 (二)</title>
    <url>/2017/07/02/2017-07-02-ElasticSearch-introductory-install-cluster/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p>#ES集群模式安装<p></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>下载elasticSearch-5.4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.4.1.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载elasticSearch其他格式或其他版本 <br><br><a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">ElasticSearch</a></p>
</li>
</ul>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>由于作者没有多余的机器进行集群安装（不喜欢虚拟机里面操作），所以通过修改端口的形式来安装启动多个ES</p>
<ul>
<li>ES有两个端口，一个是9200（rest端口），另一个是9300（内部通讯端口）</li>
<li>node1==&gt;9200,9300(数据节点)</li>
<li>node2==&gt;9400,9500(数据节点)</li>
<li>node3==&gt;9600,9700(辅助选举节点，不存储索引数据)</li>
<li><code>vim config/elasticsearch.yml</code><a id="more"></a></li>
<li>通用配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群名称 一个网段的多个ES通过集群名称来识别，默认是elasticsearch</span></span><br><span class="line">cluster.name: my-application</span><br><span class="line"><span class="comment">#节点名称 同一集群的节点名称不重复</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="comment">#节点所在机架 可以不配置</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment">#数据存储路径</span></span><br><span class="line">path.data: /opt/soft/elasticsearch-5.4.0-9200/data</span><br><span class="line"><span class="comment">#日志存储路径 默认在安装路径/logs</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment">#IP地址 广播地址 绑定端口地址</span></span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line"><span class="comment">#rest端口 一台机器上面唯一</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="comment">#通讯端口</span></span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line"><span class="comment">#初始化节点信息 使用通讯端口，默认是9300</span></span><br><span class="line"><span class="comment">#discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300",  "127.0.0.1:9500","127.0.0.1:9700"]</span></span><br><span class="line"><span class="comment"># 最小选举节点数（存在选举节点无需配置）</span></span><br><span class="line"><span class="comment">#discovery.zen.minimum_master_nodes: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定该节点是否被选举为Master，默认是true</span></span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line"><span class="comment">#指定该节点是否存储索引数据</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>node1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster.name: my-application</span><br><span class="line">node.name: node-1</span><br><span class="line">path.data: /opt/soft/elasticsearch-5.4.0-9200/data</span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9200</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"127.0.0.1:9300"</span>,<span class="string">"127.0.0.1:9500"</span>,<span class="string">"127.0.0.1:9700"</span>]</span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>node2</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster.name: my-application</span><br><span class="line">node.name: node-2</span><br><span class="line">path.data: /opt/soft/elasticsearch-5.4.0-9400/data</span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9400</span><br><span class="line">transport.tcp.port: 9500</span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"127.0.0.1:9300"</span>,<span class="string">"127.0.0.1:9500"</span>,<span class="string">"127.0.0.1:9700"</span>]</span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>node3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster.name: my-application</span><br><span class="line">node.name: node-3</span><br><span class="line">path.data: /opt/soft/elasticsearch-5.4.0-9600/data</span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9600</span><br><span class="line">transport.tcp.port: 9700</span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"127.0.0.1:9300"</span>,<span class="string">"127.0.0.1:9500"</span>,<span class="string">"127.0.0.1:9700"</span>]</span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开浏览器输入<code>http://127.0.0.1:9200/_nodes</code><br><a href="/static/images/2017-07-03/cluster-nodes.png" title="ESnodes" class="gallery-item"><img src="/static/images/2017-07-03/cluster-nodes.png" alt="ESnodes"></a></li>
</ul>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 初级使用教程-本地安装 (一)</title>
    <url>/2017/06/06/2017-06-06-ElasticSearch-introductory-install-local/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介<p>越来越多的公司使用ELK技术栈做为日志分析平台，ELK是三个工具的简称，即Logstash+ElasticSearch+Kibana，<br>其中以ElasticSearch(es)为核心（存储数据和查询数据），Logstash收集数据，Kibana进行数据展示，具体流程就是使用Logstash将日志做简单的分析后收集到ElasticSearch中，最后使用Kibana根据不同的业务进行展示（预警）。</p>
<p>ElasticSearch底层使用lucene进行索引，到目前为止ElasticSearch共有3个大版本<br>ElasticSearch1.x 最初的版本<br>ElasticSearch2.x<br>ElasticSearch5.x 提高了性能，并且将elastic所有版本都统一<br>ElasticSearch6.x </p>
<h2 id="安装依赖程序"><a href="#安装依赖程序" class="headerlink" title="安装依赖程序"></a>安装依赖程序</h2><p>安装JDK<br><strong>es5+需要jdk8的版本</strong></p>
<ul>
<li><p>下载JDK</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz?AuthParam=1499007315_3290c5ba69a1db872cf77e9abbd5018e</span><br><span class="line"><span class="built_in">cd</span> /usr/share &amp;&amp; tar xavf jdk-8u131-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment">#加入以下代码</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/share/jdk1.8.0_131</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span> </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>下载elasticSearch-5.4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.4.1.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载elasticSearch其他格式或其他版本 <br><br><a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">ElasticSearch</a></p>
</li>
</ul>
<h2 id="解压并快速启动"><a href="#解压并快速启动" class="headerlink" title="解压并快速启动"></a>解压并快速启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf elasticsearch-5.4.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个普通用户</span></span><br><span class="line">user add elastic</span><br><span class="line"></span><br><span class="line">sudo passwd elastic <span class="comment">#盲打密码</span></span><br><span class="line"></span><br><span class="line">su elastic</span><br><span class="line"></span><br><span class="line">chown -R elastic:elastic ./elasticsearch-5.4.1</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> elasticsearch-5.4.1</span><br><span class="line"></span><br><span class="line">bin/elasticsearch <span class="comment">#按Ctrl+C结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器数据,显示json数据</span></span><br><span class="line">http://127.0.0.1:9200</span><br></pre></td></tr></table></figure>

<p><a href="/static/images/2017-07-02/ES_9200_cat.png" title="ES版本信息" class="gallery-item"><img src="/static/images/2017-07-02/ES_9200_cat.png" alt="ES版本信息"></a></p>
<h2 id="安装head插件（ElasticSearch可视化）"><a href="#安装head插件（ElasticSearch可视化）" class="headerlink" title="安装head插件（ElasticSearch可视化）"></a>安装head插件（ElasticSearch可视化）</h2><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">Haed</a></p>
<ul>
<li><p>ES 2.0 <code>sudo elasticsearch/bin/plugin install mobz/elasticsearch-head</code></p>
</li>
<li><p>ES 1.0 <code>sudo elasticsearch/bin/plugin -install mobz/elasticsearch-head/1.x</code></p>
</li>
<li><p>ES 0.x <code>sudo elasticsearch/bin/plugin -install mobz/elasticsearch-head/0.9</code><br>open <a href="http://localhost:9200/_plugin/head/" target="_blank" rel="noopener">http://localhost:9200/_plugin/head/</a></p>
</li>
<li><p>ES 5.x </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br><span class="line">open http://localhost:9100/</span><br></pre></td></tr></table></figure>

</li>
</ul>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>使用tika在solr中支持pdf 和 doc搜索</title>
    <url>/2017/06/03/2017-06-03-Using%20Tika%20to%20support%20PDF%20and%20DOC%20search%20in%20Solr%20/</url>
    <content><![CDATA[<link rel="stylesheet" href="/assets/css/hint.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <h2 id="下载solr"><a href="#下载solr" class="headerlink" title="下载solr"></a>下载solr<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/6.5.1/solr-6.5.1.tgz</span><br></pre></td></tr></table></figure>

<p><a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener">点击去Solr主页</a></p>
<h2 id="配置一个普通的solr-core"><a href="#配置一个普通的solr-core" class="headerlink" title="配置一个普通的solr core"></a>配置一个普通的solr core</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/6.5.1/solr-6.5.1.tgz <span class="comment"># 已下载请忽略</span></span><br><span class="line"></span><br><span class="line">tar xzvf solr-6.5.1.tgz <span class="comment">#解压</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> solr-6.5.1/server/solr</span><br><span class="line"></span><br><span class="line">cp -r  configsets/basic_configs ./mytestconf <span class="comment"># 复制配置文件</span></span><br></pre></td></tr></table></figure>

<pre><code>solr6 支持动态字段添加，不需要配置schema.xml文件</code></pre><p>到此为止，一个普通的solr core配置完毕了</p>
<a id="more"></a>
<h2 id="配置一个支持pdf解析的solr-core"><a href="#配置一个支持pdf解析的solr-core" class="headerlink" title="配置一个支持pdf解析的solr core"></a>配置一个支持pdf解析的solr core</h2><ul>
<li>复制配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r  configsets/basic_configs ./mypdfconf</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>复制需要的依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r ../../contrib/extraction/lib ./mypdfconf/ </span><br><span class="line">cp ../../dist/solr-dataimporthandler-* ./mypdfconf/lib/</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑solrconfig配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim mypdfconf/conf/solrconfig.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加依赖配置到94行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"./lib"</span> <span class="attr">regex</span>=<span class="string">".*\.jar"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置dataimport到860行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">requestHandler</span> <span class="attr">name</span>=<span class="string">"/dataimport"</span> <span class="attr">class</span>=<span class="string">"solr.DataImportHandler"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"defaults"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"config"</span>&gt;</span>tika-data-config.xml<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">lst</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">requestHandler</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 tika-data-config.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim tika-data-config.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">        id = 1;</span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">GenerateId</span><span class="params">(row)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            row.put(<span class="string">'id'</span>, (id ++).toFixed());</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> row;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">WipOffHtml</span><span class="params">(row)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> file = row.get(<span class="string">'file'</span>);</span></span><br><span class="line"><span class="actionscript">            row.put(<span class="string">'file'</span>,file.substr(<span class="number">0</span>,file.indexOf(<span class="string">'.'</span>)));</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> row;</span></span><br><span class="line">        &#125;</span><br><span class="line">       ]]&gt;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"BinFileDataSource"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entity</span>    <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">dataSource</span>=<span class="string">"binary"</span>    <span class="attr">rootEntity</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">processor</span>=<span class="string">"FileListEntityProcessor"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">baseDir</span>=<span class="string">"/tmp/pdfs"</span> <span class="attr">fileName</span>=<span class="string">".*.(doc)|(pdf)|(xls)|(ppt)|(docx)"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">recursive</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">field</span>  <span class="attr">column</span>=<span class="string">"fileAbsolutePath"</span> <span class="attr">name</span>=<span class="string">"filePath"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">field</span>  <span class="attr">column</span>=<span class="string">"fileSize"</span> <span class="attr">name</span>=<span class="string">"size"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">field</span>  <span class="attr">column</span>=<span class="string">"fileLastModified"</span> <span class="attr">name</span>=<span class="string">"lastModified"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entity</span>  <span class="attr">name</span>=<span class="string">"documentImport"</span>  <span class="attr">processor</span>=<span class="string">"TikaEntityProcessor"</span>  <span class="attr">url</span>=<span class="string">"$&#123;files.fileAbsolutePath&#125;"</span> <span class="attr">format</span>=<span class="string">"text"</span> <span class="attr">transformer</span>=<span class="string">"HTMLStripTransformer,RegexTransformer,script:GenerateId"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">field</span>  <span class="attr">column</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"fileName"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">field</span>  <span class="attr">column</span>=<span class="string">"Author"</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">meta</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">field</span>  <span class="attr">column</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">meta</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">field</span>  <span class="attr">column</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">stripHTML</span>=<span class="string">"true"</span> <span class="attr">regex</span>=<span class="string">"\t|\r|\n|\s"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">replaceWith</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加pdf，doc文档（非扫描版）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp ../../../../example/exampledocs/solr-word.pdf /tmp/pdfs/</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="添加core"><a href="#添加core" class="headerlink" title="添加core"></a>添加core</h2><p><a href="/static/images/2017-06-03/solr-add-core-20170603161114.png" title="Solr add core" class="gallery-item"><img src="/static/images/2017-06-03/solr-add-core-20170603161114.png" alt="Solr add core" title="Solr add core"></a></p>
<h2 id="导入pdf数据"><a href="#导入pdf数据" class="headerlink" title="导入pdf数据"></a>导入pdf数据</h2><p><a href="/static/images/2017-06-03/solr-exec-data-import20170603154455.png" title="Solr dataImport" class="gallery-item"><img src="/static/images/2017-06-03/solr-exec-data-import20170603154455.png" alt="Solr dataImport" title="Solr dataImport"></a><br>##配置scame 分别添加 text,title,author,filePath,size,lastModified<br><a href="/static/images/2017-06-03/solr-add-field-to-schema-20170603154432.png" title="Solr6 add Fields" class="gallery-item"><img src="/static/images/2017-06-03/solr-add-field-to-schema-20170603154432.png" alt="Solr6 add Fields" title="Solr6 add Fields"></a></p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><a href="/static/images/2017-06-03/solr-search-20170603154351.png" title="Solr search" class="gallery-item"><img src="/static/images/2017-06-03/solr-search-20170603154351.png" alt="Solr search" title="Solr search"></a></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>solr</tag>
        <tag>tika</tag>
      </tags>
  </entry>
</search>
